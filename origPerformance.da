import sys
from random import randint
import random
import controller
import time
TIMEOUT = 1

class Proposer(process,controller.Controllee):
    def setup(ctl,acceptors:set,lossy_message:float,time_delay:float,wait_time:float):
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers
        self.lossy_message = lossy_message
        self.time_delay = time_delay

    def check_message_loss( ):
        if(random.random() < lossy_message):
            return False
        if(time_delay !=0):
            time.sleep(time_delay)
        return True

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
        if(check_message_loss()):
            send(('prepare', n), to= majority)
        if await(len(setof(a, received(('respond', _n, _), from_ =a))) > len(acceptors)/2):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                      or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))
            if(check_message_loss()):
                send(('accept', n, v), to= responded)
                send(('accept', n, v),to =parent())
            debug('### chose', n, v)

        elif some(received(('preempt',_,maxprop_num)),has = maxprop_num > n ):
            preemptSet = setof(maxprop_num, received(('preempt',_, maxprop_num)))
            output('Preempt Message Received, New proposal Number is ',max(preemptSet), 'for old Proposal Number',n)
            n = (max(preemptSet)[0]+1,self)

        elif timeout(TIMEOUT):
            output('failed proposal number', n)
    @controller.run
    def run():
        while not received(('done',)):
            to_consent()
            time.sleep(wait_time)
        output('terminating')

    def anyof(s):
        return next(iter(s)) if s else None

class Acceptor(process,controller.Controllee):
    def setup(ctl,learners:set,lossy_message:float,time_delay:float): pass
    def check_message_loss( ):
        if(random.random() < lossy_message):
            return False
        if(time_delay !=0):
            time.sleep(time_delay)
        return True

    def receive(msg= ('prepare', n), from_= p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            if(check_message_loss()):
                send(('respond', n, maxprop), to =p)
        else:
            maxSet = setof(n2, sent((_, n2, _)))
            if len(maxSet) > 0:
                output('Sending Preempt Message to : ',n)
                maxprop_num = max(maxSet)
                if(check_message_loss()):
                    send(('preempt',n,maxprop_num), to =p)

    def receive(msg= ('accept', n, v)):
        if not some(sent(('respond', n2, _)), has= n2 > n):
            if(check_message_loss()):
                send(('accepted', n, v), to= learners)
    @controller.run
    def run():
        await(received(('done',)))
        output('terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

class Learner(process,controller.Controllee):
    def setup(ctl,acceptors:set,lossy_message:float,time_delay:float): pass

    def check_message_loss( ):
        if(random.random() < lossy_message):
            return False
        if(time_delay !=0):
            time.sleep(time_delay)
        return True

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            send(('Learnt', n, v),to =parent())

        elif timeout(TIMEOUT * 10):
            output('failed learning anything')
            send(('failed learning anything'),to =parent())

    @controller.run
    def run():
        learn()
        output('terminating')
        send(('learned', ), to=parent())

def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    lossy_message = float(sys.argv[4]) if len(sys.argv) > 4 else 0
    time_delay = float(sys.argv[5]) if len(sys.argv) > 5 else 0
    wait_time = float(sys.argv[6]) if len(sys.argv) > 6 else 0
    ctl = new(controller.Controller, num= 1)
    setup(ctl, (nacceptors + nproposers + nlearners,))
    start(ctl)
    acceptors = new(Acceptor, num= nacceptors)
    proposers = new(Proposer, (ctl,acceptors,lossy_message,time_delay,wait_time), num= nproposers)
    learners = new(Learner, (ctl,acceptors,lossy_message,time_delay), num= nlearners)
    for p in acceptors: setup(p, (ctl,learners,lossy_message,time_delay))
    start(acceptors | proposers | learners)
    await(each(l in learners, has=received(('learned',), from_=l)))
    output('done')
    send(('done',), to= (acceptors|proposers))

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.
