import sys
import time
import origPreempt
import orig
import origPerformance
import controller
from prettytable import PrettyTable
import statistics
import json

class Correctness(process):
    def setup(nlearners:int,nacceptors:int,nproposers:int,numberRepeat:int,lossy_message:float,time_delay:float,wait_time:float,processorTimeout:float,learnerTimeout:float):
        self.agreed = None
        self.timeViolation = False
        self.validityViolation = False
        self.agreementViolation = False
        self.values = set()

    def receive(msg=('Learnt',l,v)):
        if v not in values:
            validityViolation = True
        if agreed is None:
            agreed = v
        elif agreed != v:
            agreementViolation = True;

    def receive(msg=('failed learn anything')):
        timeViolation = True

    def receive(msg=('accept',n,v)):
        values.add(v)

    def run():
        Correctness_Table = PrettyTable()
        Correctness_Table.field_names = ["Index","Algorithm","Total_Proposers","Total_Acceptors","Total_Learners","Agreement_Violation","Validity_Violation","Time_Violation"]
        for i in range(0,numberRepeat):
            acceptors = new(origPreempt.Acceptor, num= nacceptors)
            proposers = new(origPreempt.Proposer, (acceptors,), num= nproposers)
            learners = new(origPreempt.Learner, (acceptors,), num= nlearners)
            for p in acceptors: setup(p, (learners,))
            start(acceptors | proposers | learners)
            await(each(l in learners, has=received(('learned',), from_=l)))
            send(('done',), to= (acceptors|proposers))
            Correctness_Table.add_row([i,'origPreempt.da',nproposers,nacceptors,nlearners,agreementViolation,validityViolation,timeViolation])
            self.agreed = None
            self.timeViolation = False
            self.validityViolation = False
            self.agreementViolation = False
            self.values = set()

        for i in range(0,numberRepeat):
            acceptors = new(orig.Acceptor, num= nacceptors)
            proposers = new(orig.Proposer, (acceptors,), num= nproposers)
            learners = new(orig.Learner, (acceptors,), num= nlearners)
            for p in acceptors: setup(p, (learners,))
            start(acceptors | proposers | learners)
            await(each(l in learners, has=received(('learned',), from_=l)))
            send(('done',), to= (acceptors|proposers))
            Correctness_Table.add_row([i,'orig.da',nproposers,nacceptors,nlearners,agreementViolation,validityViolation,timeViolation])
            self.agreed = None
            self.timeViolation = False
            self.validityViolation = False
            self.agreementViolation = False
            self.values = set()
        print(Correctness_Table)


def main():
    nacceptors = int(sys.argv[1]) if len(sys.argv) > 1 else 3
    nproposers = int(sys.argv[2]) if len(sys.argv) > 2 else 5
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    numberRepeat = int(sys.argv[4]) if len(sys.argv) > 4 else 10
    lossy_message = float(sys.argv[5]) if len(sys.argv) > 5 else 0
    time_delay = float(sys.argv[6]) if len(sys.argv) > 6 else 0
    wait_time = float(sys.argv[7]) if len(sys.argv) > 7 else 0
    processorTimeout = float(sys.argv[8]) if len(sys.argv) > 8 else 0
    learnerTimeout = float(sys.argv[9]) if len(sys.argv) > 9 else 0
    correctness = new(Correctness, num=1)
    setup(correctness,(nlearners,nacceptors,nproposers,numberRepeat,lossy_message,time_delay,wait_time,processorTimeout,learnerTimeout))
    start(correctness)
    send(('done',), to=correctness)

